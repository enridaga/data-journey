digraph { 
"pandas" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "importedBy"]
"pd(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"pd(0)" -> "pandas" [label = "assignedFrom"]
"train_data(0)$0" -> "pd(0)" [label = "read_csv"]
"test_data(0)$0" -> "pd(0)" [label = "read_csv"]
"train_data(0)$1" -> "train_data(0)$0" [label = "dropna"]
"target(0)$0" -> "train_data(0)$1" [label = "assignedFrom"]
"col(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"cols_with_missing(0)$0" -> "col(0)" [label = "assignedFrom"]
"cols_with_missing(0)$0" -> "col(0)" [label = "assignedFrom"]
"cols_with_missing(0)$0" -> "train_data(0)$1" [label = "assignedFrom"]
"cols_with_missing(0)$0" -> "train_data(0)$1" [label = "assignedFrom"]
"cols_with_missing(0)$0" -> "col(0)" [label = "assignedFrom"]
"candidate_train_predictors(0)$0" -> "train_data(0)$1" [label = "drop"]
"[<_ast.Constant object at 0x10958dee0>, <_ast.Constant object at 0x10958d0a0>](0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"candidate_train_predictors(0)$0" -> "[<_ast.Constant object at 0x10958dee0>, <_ast.Constant object at 0x10958d0a0>](0)" [label = "drop"]
"candidate_train_predictors(0)$0" -> "cols_with_missing(0)$0" [label = "drop"]
"candidate_test_predictors(0)$0" -> "test_data(0)$0" [label = "drop"]
"[<_ast.Constant object at 0x10958d220>](0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"candidate_test_predictors(0)$0" -> "[<_ast.Constant object at 0x10958d220>](0)" [label = "drop"]
"candidate_test_predictors(0)$0" -> "cols_with_missing(0)$0" [label = "drop"]
"cname(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"low_cardinality_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"low_cardinality_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"low_cardinality_cols(0)$0" -> "candidate_train_predictors(0)$0" [label = "assignedFrom"]
"low_cardinality_cols(0)$0" -> "candidate_train_predictors(0)$0" [label = "assignedFrom"]
"low_cardinality_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"low_cardinality_cols(0)$0" -> "candidate_train_predictors(0)$0" [label = "assignedFrom"]
"low_cardinality_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"numeric_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"numeric_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"numeric_cols(0)$0" -> "candidate_train_predictors(0)$0" [label = "assignedFrom"]
"numeric_cols(0)$0" -> "candidate_train_predictors(0)$0" [label = "assignedFrom"]
"numeric_cols(0)$0" -> "cname(0)" [label = "assignedFrom"]
"[<_ast.Constant object at 0x109540d60>, <_ast.Constant object at 0x109540d30>](0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"numeric_cols(0)$0" -> "[<_ast.Constant object at 0x109540d60>, <_ast.Constant object at 0x109540d30>](0)" [label = "assignedFrom"]
"my_cols(0)$0" -> "low_cardinality_cols(0)$0" [label = "Add"]
"my_cols(0)$0" -> "numeric_cols(0)$0" [label = "Add"]
"train_predictors(0)$0" -> "candidate_train_predictors(0)$0" [label = "assignedFrom"]
"train_predictors(0)$0" -> "my_cols(0)$0" [label = "assignedFrom"]
"test_predictors(0)$0" -> "candidate_test_predictors(0)$0" [label = "assignedFrom"]
"test_predictors(0)$0" -> "my_cols(0)$0" [label = "assignedFrom"]
"train_predictors(0)$1" -> "train_predictors(0)$0" [label = "sample"]
"one_hot_encoded_training_predictors(0)$0" -> "pd(0)" [label = "get_dummies"]
"one_hot_encoded_training_predictors(0)$0" -> "train_predictors(0)$1" [label = "get_dummies"]
"sklearn.model_selection" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "importedBy"]
"cross_val_score" -> "sklearn.model_selection" [label = "importedBy"]
"cross_val_score(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"cross_val_score(0)" -> "cross_val_score" [label = "assignedFrom"]
"sklearn.ensemble" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "importedBy"]
"RandomForestRegressor" -> "sklearn.ensemble" [label = "importedBy"]
"RandomForestRegressor(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"RandomForestRegressor(0)" -> "RandomForestRegressor" [label = "assignedFrom"]
"X(1)" -> "get_mae[0]" [label = "_argToVar"]
"y(1)" -> "get_mae[1]" [label = "_argToVar"]
"predictors_without_categoricals(0)$0" -> "train_predictors(0)$1" [label = "select_dtypes"]
"[<_ast.Constant object at 0x1095ffeb0>](0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"predictors_without_categoricals(0)$0" -> "[<_ast.Constant object at 0x1095ffeb0>](0)" [label = "select_dtypes"]
"mae_without_categoricals(0)$0" -> "predictors_without_categoricals(0)$0" [label = "get_mae"]
"mae_without_categoricals(0)$0" -> "target(0)$0" [label = "get_mae"]
"mae_one_hot_encoded(0)$0" -> "one_hot_encoded_training_predictors(0)$0" [label = "get_mae"]
"mae_one_hot_encoded(0)$0" -> "target(0)$0" [label = "get_mae"]
"str(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"print[0]" -> "str(0)" [label = "print"]
"int(0)" -> "using-categorical-data-with-one-hot-encoding.ipynb" [label = "appearsIn"]
"print[1]" -> "int(0)" [label = "print"]
"print[2]" -> "mae_without_categoricals(0)$0" [label = "print"]
"print[0]" -> "str(0)" [label = "print"]
"print[1]" -> "int(0)" [label = "print"]
"print[2]" -> "mae_one_hot_encoded(0)$0" [label = "print"]
"one_hot_encoded_training_predictors(0)$1" -> "pd(0)" [label = "get_dummies"]
"one_hot_encoded_training_predictors(0)$1" -> "train_predictors(0)$1" [label = "get_dummies"]
"one_hot_encoded_test_predictors(0)$0" -> "pd(0)" [label = "get_dummies"]
"one_hot_encoded_test_predictors(0)$0" -> "test_predictors(0)$0" [label = "get_dummies"]
"final_train(0)$0" -> "one_hot_encoded_training_predictors(0)$1" [label = "align"]
"final_test(0)$0" -> "one_hot_encoded_training_predictors(0)$1" [label = "align"]
"final_train(0)$0" -> "one_hot_encoded_test_predictors(0)$0" [label = "align"]
"final_test(0)$0" -> "one_hot_encoded_test_predictors(0)$0" [label = "align"]
}